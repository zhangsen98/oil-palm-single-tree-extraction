kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (A, A))  # Structuring element size
TOP = cv2.morphologyEx(image, cv2.MORPH_TOPHAT, kernel, B)
retB, thresh = cv2.threshold(TOP[TOP > 0], C, D, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
threshB = TOP.copy()
splitB = retB
threshB[TOP < splitB] = E
threshB[TOP >= splitB] = F

hang = threshB.shape[0]
lie = threshB.shape[1]

# Window size for large window
S = G
# Row count
X = H
# Column count
Y = I
# Step size
step = J
sum_big = K
sum_small = L
# Window size for small window
P = M
P2 = N

big = threshB.copy()
big[big == E] = F
small = threshB.copy()
small[small == E] = F
big = big.astype(np.float64)
small = small.astype(np.float64)

for X in range(0, hang - G, step):
    for Y in range(0, lie - G, step):
        window_big = threshB[X:X + S, Y:Y + S]
        sum_big = np.sum(window_big)
        window_small = threshB[X + P2:X + P2 + P, Y + P2:Y + P2 + P]
        sum_small = np.sum(window_small)
        big[X + O:X + P, Y + O:Y + P] = sum_big / PQ
        small[X + O:X + P, Y + O:Y + P] = sum_small / QR

small[big > small] = E
small[small < U] = E
small[small > E] = X
result = small.astype(np.uint8)
